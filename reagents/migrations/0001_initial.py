# Generated by Django 2.1.2 on 2018-11-08 23:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AntibioticResistance',
            fields=[
                ('antibioticresistance_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Antibiotic resistance id')),
                ('antibioticresistance_name', models.CharField(max_length=100, unique=True, verbose_name='Antibiotic resistence name')),
            ],
            options={
                'verbose_name': 'Antibiotic resistance',
                'verbose_name_plural': 'Antibiotic Resistances',
            },
        ),
        migrations.CreateModel(
            name='Antibody',
            fields=[
                ('antibody_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Antibody id')),
                ('antibody_name', models.CharField(help_text='(p.e. "anti-Something")', max_length=100, verbose_name='Name')),
                ('antibody_target', models.CharField(help_text='(p.e. "Something")', max_length=50, verbose_name='Target')),
                ('antibody_prim_sec', models.CharField(max_length=50, verbose_name='Primary/Secondary/Tracer')),
                ('antibody_conjuged2', models.CharField(help_text='(p.e. "Alexa Fluor 488"; "Unconjugated")', max_length=50, verbose_name='Conjugated to')),
                ('antibody_reactivity', models.CharField(help_text='(species the Ab is know to react to)', max_length=100, verbose_name='Reactivity')),
                ('antibody_description', models.CharField(blank=True, max_length=50, null=True, verbose_name='Description')),
                ('antibody_source', models.CharField(blank=True, help_text='(specie the Ab was raised in; p.e. "Mouse")', max_length=100, null=True, verbose_name='Source')),
                ('antibody_ig_class', models.CharField(blank=True, help_text='(Polyclonal vs. Monoclonal; add IgG class when available)', max_length=50, null=True, verbose_name='Ig class')),
                ('antibody_applications', models.CharField(blank=True, help_text='(p.e. "WB"; "ICC/IF")', max_length=50, null=True, verbose_name='Applications')),
                ('antibody_stock_concentration', models.CharField(blank=True, max_length=50, null=True, verbose_name='Stock Concentration')),
                ('antibody_working_concentration', models.CharField(blank=True, max_length=50, null=True, verbose_name='Working concentration')),
                ('antibody_reference', models.CharField(max_length=50, verbose_name='Reference')),
                ('contact', models.CharField(blank=True, max_length=100, null=True, verbose_name='Person of contact')),
                ('antibody_notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Antibody',
                'verbose_name_plural': 'Antibodies',
            },
        ),
        migrations.CreateModel(
            name='Chemical',
            fields=[
                ('chemical_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Chemical id')),
                ('chemical_name', models.CharField(max_length=100, verbose_name='Name')),
                ('chemical_formula', models.CharField(max_length=50, verbose_name='Formula')),
                ('chemical_purpose', models.TextField(blank=True, null=True, verbose_name='Purpose')),
                ('chemical_reference', models.CharField(max_length=50, verbose_name='Reference')),
                ('contact', models.CharField(blank=True, max_length=100, null=True, verbose_name='Person of contact')),
            ],
            options={
                'verbose_name': 'Chemical',
                'verbose_name_plural': 'Chemicals',
            },
        ),
        migrations.CreateModel(
            name='Enzyme',
            fields=[
                ('enzyme_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Enzyme id')),
                ('enzyme_name', models.CharField(max_length=50, verbose_name='Name')),
                ('enzyme_description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('enzyme_reference', models.CharField(max_length=50, verbose_name='Reference')),
                ('contact', models.CharField(blank=True, max_length=100, null=True, verbose_name='Person of contact')),
            ],
            options={
                'verbose_name': 'Enzyme',
                'verbose_name_plural': 'Enzymes',
            },
        ),
        migrations.CreateModel(
            name='EnzymeType',
            fields=[
                ('enzymetype_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Enzyme type id')),
                ('enzymetype_name', models.CharField(max_length=100, unique=True, verbose_name='Enzyme type name')),
            ],
            options={
                'verbose_name': 'Enzyme type',
                'verbose_name_plural': 'Enzymes types',
            },
        ),
        migrations.CreateModel(
            name='GrowthStrains',
            fields=[
                ('growthstrain_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Growth strain id')),
                ('growthstrain_name', models.CharField(max_length=100, unique=True, verbose_name='Growth strain name')),
            ],
            options={
                'verbose_name': 'Growth strain',
                'verbose_name_plural': 'Growth strains',
            },
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('lab_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Lab id')),
                ('lab_name', models.CharField(max_length=100, verbose_name='Lab name')),
            ],
            options={
                'verbose_name': 'Lab',
                'verbose_name_plural': 'Labs',
            },
        ),
        migrations.CreateModel(
            name='Plasmids',
            fields=[
                ('plasmid_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Plasmid id')),
                ('plasmid_name', models.CharField(max_length=50, verbose_name='Plasmid name')),
                ('plasmid_mcs', models.BooleanField(default=False, verbose_name='Multiple Cloning Site (MCS)')),
                ('plasmid_sc_enzymes', models.TextField(blank=True, null=True, verbose_name='Single cutting enzymes')),
                ('plasmid_backbone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Backbone')),
                ('plasmid_gateway', models.CharField(blank=True, choices=[('N', 'No'), ('Y', 'Yes')], max_length=10, null=True, verbose_name='Gateway')),
                ('plasmid_vector', models.CharField(blank=True, choices=[('DO', 'Donor vector'), ('DE', 'Destination')], max_length=10, null=True, verbose_name='Vector')),
                ('plasmid_reference', models.CharField(max_length=50, verbose_name='Reference')),
                ('contact', models.CharField(blank=True, max_length=100, null=True, verbose_name='Person of contact')),
                ('plasmid_system', models.CharField(blank=True, choices=[('G', 'GAL4/UAS'), ('Q', 'Q'), ('L', 'LexA')], max_length=10, null=True, verbose_name='System')),
                ('plasmid_flippases', models.CharField(blank=True, choices=[('N', 'No'), ('Y', 'Yes')], max_length=10, null=True, verbose_name='Flippases')),
                ('plasmid_attb', models.CharField(blank=True, choices=[('N', 'No'), ('Y', 'Yes')], max_length=10, null=True, verbose_name='attB')),
                ('plasmid_marker', models.CharField(blank=True, choices=[('W', 'White gene'), ('M', 'Mini white gene')], max_length=10, null=True, verbose_name='Marker')),
                ('plasmid_promoter', models.CharField(max_length=50, verbose_name='Promoter')),
                ('plasmid_transgene', models.CharField(max_length=50, verbose_name='Transgene')),
                ('plasmid_fluorchrome', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fluorochrome')),
                ('plasmid_seq_primers', models.CharField(max_length=50, verbose_name='Sequencing primers')),
                ('plasmid_sequence', models.FileField(max_length=255, upload_to='uploads/abstractsequenceinformation', verbose_name='Map')),
                ('plasmid_sequence2', models.FileField(blank=True, max_length=255, null=True, upload_to='uploads/abstractsequenceinformation', verbose_name='Sequence')),
                ('plasmid_temperature', models.IntegerField(max_length=3, verbose_name='Temperature (C)')),
                ('plasmid_methylation', models.CharField(blank=True, max_length=100, null=True, verbose_name='Methylation')),
                ('anti_resistance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.AntibioticResistance', verbose_name='Antibiotic resistance')),
                ('growthstrain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reagents.GrowthStrains', verbose_name='Growth strain')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Lab', verbose_name='Lab')),
            ],
            options={
                'verbose_name': 'Plasmid',
                'verbose_name_plural': 'Plasmids',
            },
        ),
        migrations.CreateModel(
            name='Primer',
            fields=[
                ('primer_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Primer id')),
                ('primer_name', models.CharField(max_length=50, verbose_name='Name')),
                ('primer_sequence', models.CharField(max_length=100, verbose_name="Sequence (5'-3')")),
                ('primer_purpose', models.TextField(verbose_name='Purpose')),
                ('primer_melting_temp', models.IntegerField(max_length=3, verbose_name='Melting Temperature (C)')),
                ('contact', models.CharField(blank=True, max_length=100, null=True, verbose_name='Person of contact')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Lab', verbose_name='Lab')),
            ],
            options={
                'verbose_name': 'Primer',
                'verbose_name_plural': 'Primers',
            },
        ),
        migrations.CreateModel(
            name='Reagent',
            fields=[
                ('reagent_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Reagent id')),
                ('reagent_name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('reagent_reagent', models.CharField(max_length=50, verbose_name='Reagent')),
                ('reagent_purpose', models.TextField(blank=True, null=True, verbose_name='Purpose')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Lab', verbose_name='Lab')),
            ],
            options={
                'verbose_name': 'Reagent',
                'verbose_name_plural': 'Reagents',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('supplier_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Supplier id')),
                ('supplier_name', models.CharField(max_length=100, unique=True, verbose_name='Supplier name')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
            },
        ),
        migrations.CreateModel(
            name='VectorType',
            fields=[
                ('vectortype_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Vector type id')),
                ('vectortype_name', models.CharField(max_length=100, unique=True, verbose_name='Vector type name')),
            ],
            options={
                'verbose_name': 'Vector type',
                'verbose_name_plural': 'Vector types',
            },
        ),
        migrations.AddField(
            model_name='reagent',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Supplier', verbose_name='Supplier'),
        ),
        migrations.AddField(
            model_name='primer',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Supplier', verbose_name='Supplier'),
        ),
        migrations.AddField(
            model_name='plasmids',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Supplier', verbose_name='Supplier'),
        ),
        migrations.AddField(
            model_name='plasmids',
            name='vectortype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.VectorType', verbose_name='Vector type'),
        ),
        migrations.AddField(
            model_name='enzyme',
            name='enzymetype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.EnzymeType', verbose_name='Type of enzyme'),
        ),
        migrations.AddField(
            model_name='enzyme',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Lab', verbose_name='Lab'),
        ),
        migrations.AddField(
            model_name='enzyme',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Supplier', verbose_name='Supplier'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Lab', verbose_name='Lab'),
        ),
        migrations.AddField(
            model_name='chemical',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Supplier', verbose_name='Supplier'),
        ),
        migrations.AddField(
            model_name='antibody',
            name='lab',
            field=models.ForeignKey(default=True, on_delete=django.db.models.deletion.CASCADE, to='reagents.Lab', verbose_name='Lab'),
        ),
        migrations.AddField(
            model_name='antibody',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reagents.Supplier', verbose_name='Supplier'),
        ),
        migrations.AlterUniqueTogether(
            name='primer',
            unique_together={('primer_name', 'primer_sequence', 'supplier', 'lab')},
        ),
        migrations.AlterUniqueTogether(
            name='plasmids',
            unique_together={('plasmid_name', 'plasmid_reference', 'supplier', 'lab')},
        ),
        migrations.AlterUniqueTogether(
            name='enzyme',
            unique_together={('enzyme_name', 'enzyme_reference', 'supplier', 'lab')},
        ),
        migrations.AlterUniqueTogether(
            name='chemical',
            unique_together={('chemical_name', 'chemical_reference', 'supplier', 'lab')},
        ),
        migrations.AlterUniqueTogether(
            name='antibody',
            unique_together={('antibody_name', 'antibody_reference', 'supplier', 'lab')},
        ),
    ]
